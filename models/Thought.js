const { Schema, model, Types } = require("mongoose");

//dateformat
const dateFormat = require('../utils/dateFormat');

const ReactionSchema = new Schema ({
    reactionId: {
        type: Schema.Types.ObjectId,
        default: () => new Types.ObjectId(),
      },//a unique identifier for each reaction, which is a MongoDB ObjectId. This field is required, but its value will be automatically generated by MongoDB when a new Reaction is created.
      reactionBody: {
        type: String,
        required: true,       //requiring data to exist for this field
        maxlength: 280,
      }, //a String containing the text of the reaction. This field is required and has a maximum length of 280 characters.
      username: {
        type: String,
        required: true,
      },//a String representing the username of the user who created the reaction. This field is required.
      createdAt: {
        type: Date,
        default: Date.now,
        get: (createdAtVal) => dateFormat(createdAtVal),
      },//a Date object representing the date and time when the reaction was created. This field has a default value of the current date and time and is also passed through the dateFormat function before being returned.

},

    {
        toJSON: {
            getters: true
        }, 
        id: false
    } //configuration object that specifies how to convert the document to a JSON object. 
    );

    const ThoughtSchema = new Schema({
        thoughtText: {
            type: String, 
            required: true,
            minlength: 1, 
            maxlength: 280
        }, // a String containing the text of the thought. This field is required and has a minimum length of 1 character and a maximum length of 280 characters.
        createdAt: {
            type: Date,
            default: Date.now,
            get: (createdAtVal) => dateFormat(createdAtVal),
          },//a Date object representing the date and time when the reaction was created. This field has a default value of the current date and time and is also passed through the dateFormat function before being returned.
          username: {
            type: String,
            required: true
          },
          reactions: [ReactionSchema]
        },  //an array of ReactionSchema objects representing the reactions associated with the thought. This field has no validation or default values.
        {
            toJSON: {
                virtuals: true,
                getters: true
            },
            id: false
        
        } 
    );

    //count the lengths of thought's reactions
ThoughtSchema.virtual('reactionCount').get(function() {
    return this.reactions.length;
});//virtual property called reactionCount on the ThoughtSchema. Virtuals are additional fields for a Mongoose model that are not stored in the database but are computed based on other fields in the document.

const Thought = model('Thought', ThoughtSchema);

module.exports = Thought;
